import groovy.json.JsonSlurper

// 组件化切换
task component << {
    String sign = "// generate by _component.gradle, do not modify!\n"
    File pkgJsonFile = new File(".component.json")
    if (!pkgJsonFile.exists()) {
        pkgJsonFile.createNewFile()
        pkgJsonFile.write("""
// 组件化配置文件，修改下面的内容，运行 gradlew component 重新构建
{
  "entry": "main",
  "components": [
    {
      "name": "main",
      "compile": true,
      "path": "component_main"
    }
  ]
}""", "utf-8")
        throw new RuntimeException("please update .component.json first")
    }
    def pkgConfig = new JsonSlurper().parseText(pkgJsonFile.text)

    // 配置 setting.gradle
    File settingGradleFile = touchFile("settings.gradle")
    if (!settingGradleFile.text.contains(sign)) {
        settingGradleFile.append("${sign}apply from: '.component_setting.gradle'")
    }
    // 打印消息
    String logContent = ""
    // 组件化配置文件，配置组件入口等
    File configFile = touchFile(".component_config.gradle")
    // 组件化依赖文件，动态组件依赖
    File depsFile = touchFile(".component_deps.gradle")
    String depsContent = "\n"
    // 组件化 settings 文件，动态添加编译
    File settingFile = touchFile(".component_setting.gradle")
    String settingContent = ""
    for (component in pkgConfig.components) {
        if (component.compile && !isRemote(component.path)) {
            settingContent += "include(':${component.path}')\n"
            depsContent += "  runtimeOnly project(':${component.path}')\n"
        }
        logContent += "组件 => ${component.name} | ${component.compile ? '' : '不'}参与编译 | 路径 => ${component.path}\n"
    }
    println("""
配置文件详情如下：
入口组件：${pkgConfig.entry}
${logContent}
""")
    settingFile.write("${sign}${settingContent}", "utf-8")
    configFile.write("""${sign}ext.component = [ entry: '${pkgConfig.entry}' ]""", "utf-8")
    depsFile.write("""${sign}dependencies {${depsContent}}""", "utf-8")
}

static boolean isRemote(String path) {
    return path.contains(":")
}

static File touchFile(String name) {
    File file = new File(name)
    if (!file.exists()) {
        file.createNewFile()
    }
    return file
}